
using MemoryReads64;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public class CheckpointLookup
{
    static Dictionary<byte[], byte[]> checkpointSwapTable = new Dictionary<byte[], byte[]>(new ByteArrayComparer());
    static Dictionary<byte[], byte> multiCutsceneAddresses = new Dictionary<byte[], byte>(new ByteArrayComparer());
    public static void initialiseSwapTable()
    {
        if (checkpointSwapTable.Keys.Count == 0)
        {
            // Prologue
            checkpointSwapTable.Add(new byte[] { 0x4C, 0x4E, 0x96, 0x58, 0xBB, 0xB4, 0x30, 0x78, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
           , new byte[] { 0x8F, 0x60, 0x1E, 0x58, 0x19, 0x36, 0x4E, 0x8D, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // picking up codex skip
            checkpointSwapTable.Add(new byte[] { 0x8F, 0x60, 0x1E, 0x58, 0x19, 0x36, 0x4E, 0x8D, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
           , new byte[] { 0x4A, 0xE0, 0x6D, 0x58, 0x74, 0x70, 0xAC, 0xAC, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Rappel to slide
            checkpointSwapTable.Add(new byte[] { 0x4A, 0xE0, 0x6D, 0x58, 0x74, 0x70, 0xAC, 0xAC, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0xE2, 0xDB, 0x52, 0x33, 0xAD, 0x66, 0xFD, 0xA6, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // End cutscene in Prologue
            
            // Ch1
            checkpointSwapTable.Add(new byte[] { 0xE2, 0xDB, 0x52, 0x33, 0xAD, 0x66, 0xFD, 0xA6, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0x6B, 0x40, 0x25, 0x33, 0x84, 0x6D, 0xBC, 0x36, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // first cutscene in appartment
            checkpointSwapTable.Add(new byte[] { 0x6B, 0x40, 0x25, 0x33, 0x84, 0x6D, 0xBC, 0x36, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0x02, 0xBC, 0xDE, 0x33, 0xF4, 0x12, 0x30, 0x17, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // car cutscene
            checkpointSwapTable.Add(new byte[] { 0x8B, 0xC3, 0x2D, 0x33, 0x0D, 0xC7, 0x02, 0x97, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0x03, 0x1B, 0xCB, 0x33, 0x39, 0x75, 0xD9, 0xE0, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // meet danik
            checkpointSwapTable.Add(new byte[] { 0x1C, 0xB5, 0xAD, 0x33, 0xB4, 0x30, 0x7C, 0x40, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
           , new byte[] { 0x11, 0x75, 0x90, 0x33, 0x9C, 0x62, 0x27, 0xE3, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // get on the ship - note, this skips straight past wake up cutscene

            // Ch2
            checkpointSwapTable.Add(new byte[] { 0x74, 0xE7, 0x23, 0x33, 0x60, 0x49, 0x6F, 0xAF, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0x11, 0x75, 0x90, 0x33, 0x9C, 0x62, 0x27, 0xE3, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // wake up
            checkpointSwapTable.Add(new byte[] { 0x11, 0x75, 0x90, 0x33, 0x9C, 0x62, 0x27, 0xE3, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0xFF, 0x67, 0xB0, 0x33, 0x99, 0xED, 0xD7, 0xAE, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Bridge
            checkpointSwapTable.Add(new byte[] { 0xFF, 0x67, 0xB0, 0x33, 0x99, 0xED, 0xD7, 0xAE, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0xFB, 0x6E, 0x9C, 0x33, 0x85, 0x6E, 0xC7, 0x88, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // where can i find an eva suit
            
            //Broken - dont get zero G
            //checkpointSwapTable.Add(new byte[] { 0xFB, 0x6E, 0x9C, 0x33, 0x85, 0x6E, 0xC7, 0x88, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            //, new byte[] { 0x75, 0x46, 0x10, 0x33, 0x2D, 0xAC, 0x04, 0xE9, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Getting suit
            checkpointSwapTable.Add(new byte[] { 0x75, 0x46, 0x10, 0x33, 0x2D, 0xAC, 0x04, 0xE9, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
            , new byte[] { 0x75, 0x46, 0x10, 0x33, 0xD7, 0x98, 0xCF, 0x13, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Jump section cutscene

            // CH3

            //broken
            //checkpointSwapTable.Add(new byte[] { 0x27, 0xB7, 0xC8, 0x4F, 0x67, 0x60, 0xC0, 0xA1, 0x4D, 0x41, 0x52, 0x49, 0x4E, 0x45, 0x4C, 0x4C }
            //, new byte[] { 0x20, 0x90, 0x9F, 0x4F, 0x99, 0xCE, 0xC2, 0xF2, 0x4D, 0x41, 0x52, 0x49, 0x4E, 0x45, 0x4C, 0x4C }); // Meet Ellie

            // Ch4

            //broken
            //checkpointSwapTable.Add(new byte[] { 0x3B, 0x0D, 0x15, 0x30, 0xB9, 0x67, 0x53, 0x8D, 0x5A, 0x48, 0x45, 0x4E, 0x47, 0x32, 0x37, 0x37 }
            //, new byte[] { 0xBC, 0xB0, 0xED, 0x4F, 0x40, 0x7A, 0x0A, 0xB0, 0x4D, 0x41, 0x52, 0x49, 0x4E, 0x45, 0x4C, 0x4C }); // admiral quarters

            //CH6
            //broken
            //checkpointSwapTable.Add(new byte[] { 0xCB, 0xFA, 0x6D, 0x46, 0xC6, 0x27, 0x97, 0x01, 0x4F, 0x4E, 0x31, 0x4A, 0x46, 0x4D, 0x45, 0x49 }
            //, new byte[] { 0x4D, 0x2C, 0xA3, 0x31, 0xFB, 0x33, 0x27, 0x04, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }); // Terra Nova escape

            //skips gameplay (moving the oxygen injectors)
            checkpointSwapTable.Add(new byte[] { 0x2A, 0x26, 0xCC, 0x58, 0xE7, 0x90, 0x48, 0xF6, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xE7, 0x67, 0xF2, 0x01, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier enter
            checkpointSwapTable.Add(new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xE7, 0x67, 0xF2, 0x01, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36, 0x32, 0x36 }
            , new byte[] { 0x46, 0x4B, 0xCC, 0x58, 0xE1, 0xC1, 0xF6, 0x52, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier launch
            checkpointSwapTable.Add(new byte[] { 0x46, 0x4B, 0xCC, 0x58, 0xE1, 0xC1, 0xF6, 0x52, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xE7, 0x37, 0x5F, 0x06, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier launch 2
            checkpointSwapTable.Add(new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xE7, 0x37, 0x5F, 0x06, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xC7, 0x3A, 0x84, 0x08, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier launch 3
            checkpointSwapTable.Add(new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xC7, 0x3A, 0x84, 0x08, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0x17, 0x6D, 0xA5, 0x0A, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier launch 4
            checkpointSwapTable.Add(new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0x17, 0x6D, 0xA5, 0x0A, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xA7, 0x9D, 0x04, 0x0E, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Crozier launch 5
            
            checkpointSwapTable.Add(new byte[] { 0x2B, 0x26, 0xCC, 0x58, 0xA7, 0x9D, 0x04, 0x0E, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
               , new byte[] { 0xD6, 0xDC, 0xA8, 0x33, 0xD1, 0x48, 0x4B, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Crash
            checkpointSwapTable.Add(new byte[] { 0xD6, 0xDC, 0xA8, 0x33, 0xD1, 0x48, 0x4B, 0x45, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
              , new byte[] { 0xF7, 0xF2, 0xCB, 0x33, 0x94, 0x7E, 0x37, 0xB0, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Crash wakeup

            checkpointSwapTable.Add(new byte[] { 0x3F, 0xFB, 0x14, 0x33, 0xF1, 0x74, 0xF8, 0x94, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
             , new byte[] { 0x33, 0xF3, 0xCB, 0x33, 0x48, 0x6F, 0x3E, 0x67, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Crash site QTE
            checkpointSwapTable.Add(new byte[] { 0x33, 0xF3, 0xCB, 0x33, 0x48, 0x6F, 0x3E, 0x67, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
             , new byte[] { 0x98, 0xF8, 0xCB, 0x33, 0x19, 0xBB, 0xA1, 0x61, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Find corpse 
            checkpointSwapTable.Add(new byte[] { 0x98, 0xF8, 0xCB, 0x33, 0x19, 0xBB, 0xA1, 0x61, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
                 , new byte[] { 0xF0, 0xFE, 0xCB, 0x33, 0x70, 0xF8, 0x33, 0x29, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // snowbeast


            //CH9
            checkpointSwapTable.Add(new byte[] { 0x5B, 0x0E, 0xE1, 0x33, 0x19, 0x4F, 0x79, 0x1F, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
             , new byte[] { 0x64, 0x47, 0x0D, 0x33, 0x33, 0x2B, 0xE3, 0xEE, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // snow plow QTE
            //double cutscene bug
            checkpointSwapTable.Add(new byte[] { 0x64, 0x47, 0x0D, 0x33, 0x33, 0x2B, 0xE3, 0xEE, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
             , new byte[] { 0xD6, 0x58, 0xAD, 0x33, 0x18, 0xF1, 0x70, 0xB0, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Pre snowbeast 1
            
            checkpointSwapTable.Add(new byte[] { 0xD6, 0x58, 0xAD, 0x33, 0x18, 0xF1, 0x70, 0xB0, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }
             , new byte[] { 0x49, 0x05, 0x7D, 0x33, 0x85, 0x63, 0x23, 0x3C, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }); // Post snowbeast

            //ch10

            //skips some running
            checkpointSwapTable.Add(new byte[] { 0x1A, 0x10, 0x1B, 0x58, 0x20, 0xE8, 0x82, 0xDA, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x68, 0x8D, 0xB5, 0x45, 0x3A, 0x88, 0x68, 0x6D, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // meet crew
            checkpointSwapTable.Add(new byte[] { 0x68, 0x8D, 0xB5, 0x45, 0x3A, 0x88, 0x68, 0x6D, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0xB3, 0xD9, 0x1E, 0x45, 0x69, 0xB1, 0xCC, 0xDD, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // look out

            checkpointSwapTable.Add(new byte[] { 0x73, 0x2C, 0x13, 0x58, 0x4C, 0xA3, 0x7A, 0xA5, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x43, 0xEB, 0xD2, 0x4F, 0xF2, 0x97, 0x63, 0x4B, 0x4D, 0x41, 0x52, 0x49, 0x4E, 0x45, 0x4C, 0x4C }); // start nexus boss

            checkpointSwapTable.Add(new byte[] { 0x43, 0xEB, 0xD2, 0x4F, 0xF2, 0x97, 0x63, 0x4B, 0x4D, 0x41, 0x52, 0x49, 0x4E, 0x45, 0x4C, 0x4C }
            , new byte[] { 0xD7, 0x0F, 0x42, 0x45, 0x02, 0x77, 0x1C, 0x02, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // enter nexus

            checkpointSwapTable.Add(new byte[] { 0xD7, 0x0F, 0x42, 0x45, 0x02, 0x77, 0x1C, 0x02, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0x63, 0xCB, 0x5E, 0x45, 0x20, 0x5C, 0x05, 0x77, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // norton kill


            //ch13 - cliffs
            checkpointSwapTable.Add(new byte[] { 0x63, 0xCB, 0x5E, 0x45, 0x20, 0x5C, 0x05, 0x77, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0xE0, 0xC6, 0x31, 0x45, 0x11, 0x94, 0xBC, 0xE0, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // meetup at bottom of cliffs
            checkpointSwapTable.Add(new byte[] { 0x02, 0xEF, 0xCB, 0x45, 0xBA, 0x28, 0x8D, 0xDE, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0x02, 0xEF, 0xCB, 0x45, 0xAA, 0xEF, 0x1E, 0x90, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // Santos dies
            checkpointSwapTable.Add(new byte[] { 0x02, 0xEF, 0xCB, 0x45, 0xAA, 0xEF, 0x1E, 0x90, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0x88, 0xDB, 0x13, 0x45, 0xE8, 0xA4, 0xAA, 0xA5, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }); // snowbeast 3 dies
            checkpointSwapTable.Add(new byte[] {0x88, 0xDB, 0x13, 0x45, 0xE8, 0xA4, 0xAA, 0xA5, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }
            , new byte[] { 0x72, 0x13, 0x21, 0x58, 0xF0, 0x12, 0x79, 0x15, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // Meetup at rosetta labs


            //ch14 - rosetta labs
            checkpointSwapTable.Add(new byte[] { 0x72, 0x13, 0x21, 0x58, 0xF0, 0x12, 0x79, 0x15, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }
            , new byte[] { 0x2F, 0xAD, 0x6D, 0x58, 0xB0, 0x32, 0x07, 0x94, 0x46, 0x49, 0x54, 0x5A, 0x31, 0x35, 0x32, 0x36 }); // ladder break - skips some running


            //ch17 - alien ruins
            checkpointSwapTable.Add(new byte[] { 0x50, 0xBF, 0x32, 0x58, 0x8B, 0x7B, 0xAB, 0xC8, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }
            , new byte[] { 0x06, 0x4E, 0xBA, 0x58, 0x93, 0x6B, 0x70, 0xBD, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }); // <3 2 <3
            checkpointSwapTable.Add(new byte[] { 0x06, 0x4E, 0xBA, 0x58, 0x93, 0x6B, 0x70, 0xBD, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }
            , new byte[] { 0xF8, 0x25, 0x83, 0x58, 0x35, 0x47, 0x53, 0xDC, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }); // getting codex
            //broken (softlock)
            //checkpointSwapTable.Add(new byte[] { 0xC6, 0x9C, 0x33, 0x58, 0xC3, 0x16, 0xF5, 0xBC, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }
            //, new byte[] { 0x7F, 0x91, 0x97, 0x58, 0xD2, 0xC2, 0x2E, 0xF2, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }); // configuring machine 1

            //ch18 - alien machine
            checkpointSwapTable.Add(new byte[] { 0xC4, 0x03, 0x16, 0x58, 0x1F, 0x47, 0xBC, 0xFE, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }
            , new byte[] { 0x38, 0xDA, 0x26, 0x31, 0xA0, 0x46, 0x01, 0x81, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }); // wake up moon

            //ch19 - moon
            // TODO: these don't work for some unknown reason
            checkpointSwapTable.Add(new byte[] { 0xDB, 0xFE, 0xA0, 0x31, 0x50, 0xE8, 0x28, 0xF6, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }
            , new byte[] { 0xC2, 0x6D, 0x15, 0x31, 0xDD, 0x22, 0x85, 0xB5, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30  }); // start moon fight
            checkpointSwapTable.Add(new byte[] { 0xC2, 0x6D, 0x15, 0x31, 0xDD, 0x22, 0x85, 0xB5, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }
            , new byte[] { 0xCD, 0xB1, 0xAE, 0x42, 0x9F, 0x33, 0xCA, 0x4E, 0x57, 0x53, 0x31, 0x4A, 0x46, 0x43, 0x48, 0x41 }); // end moon fight
        }

        if (multiCutsceneAddresses.Keys.Count == 0)
        {
            //Broken - dont get zero G
            //multiCutsceneAddresses.Add(new byte[] { 0xFB, 0x6E, 0x9C, 0x33, 0x85, 0x6E, 0xC7, 0x88, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }, 2); // Getting suit
            multiCutsceneAddresses.Add(new byte[] { 0x64, 0x47, 0x0D, 0x33, 0x33, 0x2B, 0xE3, 0xEE, 0x50, 0x52, 0x49, 0x43, 0x45, 0x32, 0x30, 0x36 }, 2); // Pre snowbeast 1
            multiCutsceneAddresses.Add(new byte[] { 0x02, 0xEF, 0xCB, 0x45, 0xAA, 0xEF, 0x1E, 0x90, 0x57, 0x53, 0x31, 0x4A, 0x48, 0x55, 0x47, 0x48 }, 2); // Snowbeast 3
            multiCutsceneAddresses.Add(new byte[] { 0x06, 0x4E, 0xBA, 0x58, 0x93, 0x6B, 0x70, 0xBD, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }, 2); //  getting codex
            multiCutsceneAddresses.Add(new byte[] { 0xC4, 0x03, 0x16, 0x58, 0x1F, 0x47, 0xBC, 0xFE, 0x4C, 0x49, 0x50, 0x4F, 0x31, 0x30, 0x32, 0x30 }, 2); // wake up moon
            multiCutsceneAddresses.Add(new byte[] { 0xDB, 0xFE, 0xA0, 0x31, 0x50, 0xE8, 0x28, 0xF6, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }, 2); // start moon fight
            multiCutsceneAddresses.Add(new byte[] { 0xC2, 0x6D, 0x15, 0x31, 0xDD, 0x22, 0x85, 0xB5, 0x59, 0x4D, 0x55, 0x52, 0x50, 0x48, 0x59, 0x30 }, 4); // end moon fight

        }
    }

    public static bool swapCheckPointIfInTable(Process Proc, Pointer pointerInstance, byte[] currentCheckpoint)
    {
        if(checkpointSwapTable.TryGetValue(currentCheckpoint, out byte[] value))
        {
            Trainer.WritePointerByteArray(Proc, pointerInstance, value);
            return true;
        }

        return false;
    }

    public static int getCutsceneCountForCheckpoint(byte[] currentCheckpoint)
    {
        if (multiCutsceneAddresses.TryGetValue(currentCheckpoint, out byte value))
        {
            return value;
        }

        return 0;
    }
}

public class ByteArrayComparer : IEqualityComparer<byte[]>
{
    public bool Equals(byte[] left, byte[] right)
    {
        if (left == null || right == null)
        {
            return left == right;
        }
        return left.SequenceEqual(right);
    }
    public int GetHashCode(byte[] key)
    {
        if (key == null)
            throw new ArgumentNullException("key");
        return key.Sum(b => b);
    }

}